name: ðŸ’« CI

on:
  push:
    branches: [master]

concurrency:
  group: environment-${{ github.ref }}
  cancel-in-progress: true

jobs:
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Go with cache
        uses: actions/setup-go@v3
        with:
          go-version-file: ./go.work
          cache-dependency-path: |
            **/go.sum

      - name: Run Tests
        env:
          GITHUB_ACTIONS: true
          POSTGRES_DB: testing
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: localhost
        run: |
          go test -v -parallel 1 ./cron/...
          go test -v -parallel 1 ./database/...
          go test -v -parallel 1 ./log/...
          go test -v -parallel 1 ./server/...
          go test -v -parallel 1 ./shared/...
          go test -v -parallel 1 ./utils/...
          go test -v -parallel 1 ./uploadapi/...

      - name: Send Discord Webhook
        if: failure()
        uses: ./.github/actions/discord-webhook
        with:
          context: prod
          prod-webhook-url: ${{ secrets.DISCORD_WEBHOOK_PROD }}
          qa-webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          embed-color: 15548997
          embed-title: "${{ needs.setup_env.outputs.commit_msg }}  â€¢  ${{ needs.setup_env.outputs.short_sha }}"
          embed-description: "```Tests Failed```"



#  deploy_prod:
#    name: ðŸš€ Deploy Apps (PROD)
#    runs-on: self-hosted
#    needs:
#      - setup_env
#      - test
#      - build
#    env:
#      GITHUB_RUN_ID: ${{ github.run_id }}
#    steps:
#      - uses: actions/checkout@v3

#      - name: Deploy
#        uses: ./.github/actions/k8s-deploy-aks
#        with:
#          image: stablecog/sc-server:${{ needs.setup_env.outputs.branch_name}}-${{ env.GITHUB_RUN_ID }}
#          embed-title: "${{ needs.setup_env.outputs.commit_msg }}  â€¢  ${{ needs.setup_env.outputs.short_sha }}"
#          prod-webhook-url: ${{ secrets.DISCORD_WEBHOOK_PROD }}
#          qa-webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
#          kube_config: ${{ secrets.AKS_KUBE_CONFIG }}
#          env: prod

  # release_pull_request:
  #   runs-on: ubuntu-latest
  #   name: ðŸš¦ Create Release PR
  #   needs:
  #     - test
  #     - build
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Create/Update Pull Request
  #       uses: devops-infra/action-pull-request@v0.5.5
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         assignee: ${{ github.actor }}
  #         label: automatic,release
  #         target_branch: production
  #         template: .github/RELEASE_PR.md
  #         get_diff: true
