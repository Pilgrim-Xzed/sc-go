name: 💫 CI

on:
  push:
    branches: [master]

concurrency:
  group: environment-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup_env:
    name: ⚙️ Setup environment
    runs-on: ubuntu-20.04
    steps:
      - name: Add SHORT_SHA env property
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA::7}`" >> $GITHUB_ENV

      - name: Put commit msg in environment
        run: echo "COMMIT_MSG=${{ github.event.head_commit.message }}" >> $GITHUB_ENV

      - name: Escape commit message
        run: |
          echo "COMMIT_MSG=$(echo $COMMIT_MSG | tr -d \'\\\")" >> $GITHUB_ENV

    outputs:
      short_sha: ${{ env.SHORT_SHA }}
      commit_msg: updated code
      branch_name: master

  test:
    name: ☔️ Tests
    runs-on: ubuntu-20.04
    needs: setup_env

    # Setup postgres service for tests
    services:
      db:
        image: postgres:14
        env:
          POSTGRES_DB: testing
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        # set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Go with cache
        uses: actions/setup-go@v3
        with:
          go-version-file: ./go.work
          cache-dependency-path: |
            **/go.sum

      - name: Run Tests
        env:
          GITHUB_ACTIONS: true
          POSTGRES_DB: postgres
          POSTGRES_PORT: 5432
          POSTGRES_USER: stablecog
          POSTGRES_PASSWORD: Slammad42@
          POSTGRES_HOST: 206.189.233.138
        run: |
          go test -v -parallel 1 ./cron/...
          go test -v -parallel 1 ./database/...
          go test -v -parallel 1 ./log/...
          go test -v -parallel 1 ./shared/...
          go test -v -parallel 1 ./utils/...
          go test -v -parallel 1 ./uploadapi/...



  build:
    name: 🔨 Build Binaries and Docker Image
    runs-on: ubuntu-20.04
    needs: setup_env

    env:
      GITHUB_RUN_ID: ${{ github.run_id }}
    steps:
      - uses: actions/checkout@v3

      - name: Set build start in env variable
        run: echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV

      - name: Setup Go with cache
        uses: actions/setup-go@v3
        with:
          go-version-file: ./go.work
          cache-dependency-path: |
            **/go.sum

      - name: Login to registry
        uses: docker/login-action@v2
        with:
          username: saeedbello12@gmail.com
          password: Slammad42@

      - name: Build GO Server Binary
        run: |
          cd server && go build -ldflags "-s -w -X main.Version=${{ needs.setup_env.outputs.short_sha }} -X \"main.CommitMsg=${{ needs.setup_env.outputs.commit_msg }}\" -X main.BuildStart=${{ env.BUILD_START }}" -o server && cd ..

      - name: Build GO Cron Binary
        run: |
          cd cron && go build -ldflags "-s -w -X main.Version=${{ needs.setup_env.outputs.short_sha }} -X \"main.CommitMsg=${{ needs.setup_env.outputs.commit_msg }}\"" -o cron && cd ..

      - name: Build GO Upload API Binary
        run: |
          cd uploadapi && go build -ldflags "-s -w -X main.Version=${{ needs.setup_env.outputs.short_sha }}" -o uploadapi && cd ..

      - name: Build GO Lingua API Binary
        run: |
          cd language && go build -ldflags "-s -w -X main.Version=${{ needs.setup_env.outputs.short_sha }}" -o linguaapi && cd ..

      - name: Build GO Discord Bot Binary
        run: |
          cd discobot && go build -ldflags "-s -w -X main.Version=${{ needs.setup_env.outputs.short_sha }}" -o discobot && cd ..

      - name: 'Docker Login'
        uses: azure/docker-login@v1
        with:
          login-server: scogxx.azurecr.io
          username: scogxx
          password: g0OR5QbgcdhfOsxRgIttxQOKaRFf3NdXSrP6GslJfE+ACRDZBqbu

      - name: Build and push image
        if: success()
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64
          push: true
          file: ./Dockerfile.ci
          tags: scogxx.azurecr.io/sc-server:${{ needs.setup_env.outputs.branch_name }}-${{ env.GITHUB_RUN_ID }}

  deploy_prod:
    name: 🚀 Deploy Apps (PROD)
    runs-on: ubuntu-20.04
    needs:
      - setup_env
      - test
      - build
    env:
      GITHUB_RUN_ID: ${{ github.run_id }}
    steps:
      - uses: actions/checkout@v3

      - name: Deploy
        uses: ./.github/actions/k8s-deploy-aks
        with:
          image: scogxx.azurecr.io/sc-server:${{ needs.setup_env.outputs.branch_name}}-${{ env.GITHUB_RUN_ID }}
          embed-title: "${{ needs.setup_env.outputs.commit_msg }}  •  ${{ needs.setup_env.outputs.short_sha }}"
          kube_config: ${{ secrets.KUBECONFIG }}
          env: prod

  # release_pull_request:
  #   runs-on: ubuntu-latest
  #   name: 🚦 Create Release PR
  #   needs:
  #     - test
  #     - build
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Create/Update Pull Request
  #       uses: devops-infra/action-pull-request@v0.5.5
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         assignee: ${{ github.actor }}
  #         label: automatic,release
  #         target_branch: production
  #         template: .github/RELEASE_PR.md
  #         get_diff: true
